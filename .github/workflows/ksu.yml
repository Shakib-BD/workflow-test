name: Build Kernel
on:
  watch:
    types: [started]

  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - uses: actions/checkout@v3
    - name: Setup build kernel environment
      run: |
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download Clang Toolchain
      run: |
        mkdir clang
        git clone https://github.com/vijaymalav564/vortex-clang.git -b master --depth=1 clang

    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/mt6768-dev/android_kernel_xiaomi_mt6768 -b lineage-20 android-kernel --depth=1

    - name: Kernel patch
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/Arafattex/KernelSU_Action_mt6768 -b Lancelot-13.0 pt
        cd android-kernel
        git apply $GITHUB_WORKSPACE/kernel_workspace/pt/KernelSU.patch
  
    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

    - name: Build Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        export KBUILD_COMPILER_STRING="$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
        export KBUILD_BUILD_HOST=ozip.my.id
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)O
        make O=out ARCH=arm64 merlin_defconfig
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang READELF=llvm-readelf OBJCOPY=llvm-objcopy AS=llvm-as LD=ld.lld NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi-

    - name: Make Anykernel3
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          cp out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
          rm -rf AnyKernel3/.git* AnyKernel3/README.md
    
    - name: Upload Kernel File
      uses: actions/upload-artifact@v3
      with:
        name: Image.gz-dtb
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image.gz-dtb

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v3
      with:
        name: merlinx-kernel.zip
        path: kernel_workspace/AnyKernel3/*
